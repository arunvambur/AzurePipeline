parameters:
  - name: checkoutRepos
    type: stepList
    default: []

stages:
- stage: Build
  displayName: Build Dot Net
  jobs:
  - job: RSGBuildDotNet
    displayName: Read Service Configs
    steps:
    - ${{ each repo in parameters.checkoutRepos }}:
      - ${{ each step in repo }}:
            ${{ step.key }}: ${{ step.value }}

  - job: BuildDotNet
    dependsOn: RSGBuildDotNet
    condition: eq( dependencies.RSGBuildDotNet.outputs['sc.pipeline.build'], 'true')
    variables:
      solution: $[ dependencies.RSGBuildDotNet.outputs['sc.param.solution'] ]
      buildConfiguration: $[ dependencies.RSGBuildDotNet.outputs['sc.param.buildConfiguration'] ]      
    displayName: Build dotnet core project
    steps:
      - ${{ each repo in parameters.checkoutRepos }}:
        - ${{ each step in repo }}:
            ${{ step.key }}: ${{ step.value }}      
        
      #Prepare dotnet core project
      - template: templates/prepare-dotnet-core.yaml
        
      #Build dotnet core project"
      - template: templates/build-dotnet-core.yaml
        parameters:
          solution: $(solution)
          buildConfiguration: $(buildConfiguration)

- stage: UnitTest
  displayName: Unit test dotnet project
  jobs:
  - job: RSGUnitTestDotNet
    displayName: Read Service Configs
    steps:
    - ${{ each repo in parameters.checkoutRepos }}:
      - ${{ each step in repo }}:
            ${{ step.key }}: ${{ step.value }}
    
  - job: TestDotNet
    dependsOn: RSGUnitTestDotNet
    condition: eq( dependencies.RSGUnitTestDotNet.outputs['sc.pipeline.unitTest'], 'true')
    variables:
      solution: $[ dependencies.RSGUnitTestDotNet.outputs['sc.param.solution'] ]
      buildConfiguration: $[ dependencies.RSGUnitTestDotNet.outputs['sc.param.buildConfiguration'] ]      
    displayName: Test dotnet core project
    steps:
      - ${{ each repo in parameters.checkoutRepos }}:
        - ${{ each step in repo }}:
            ${{ step.key }}: ${{ step.value }}   

      #Prepare dotnet core project
      - template: templates/prepare-dotnet-core.yaml
        
      #Test dotnet core project"
      - template: templates/test-dotnet-core.yaml
        parameters:
          solution: $(solution)
          buildConfiguration: $(buildConfiguration)

- stage: PublishToLocal
  displayName: Publish dotnet project
  jobs:
  - job: RSGPublishDotNet
    displayName: Read Service Configs
    steps:
    - ${{ each repo in parameters.checkoutRepos }}:
      - ${{ each step in repo }}:
            ${{ step.key }}: ${{ step.value }}
  
  - job: PublishDotNet
    dependsOn: RSGPublishDotNet
    condition: eq( dependencies.RSGPublishDotNet.outputs['sc.pipeline.publishToLocal'], 'true')
    variables:
      solution: $[ dependencies.RSGPublishDotNet.outputs['sc.param.solution'] ]
      buildConfiguration: $[ dependencies.RSGPublishDotNet.outputs['sc.param.buildConfiguration'] ]      
    displayName: Publish dotnet core project to local
    steps:
      - ${{ each repo in parameters.checkoutRepos }}:
        - ${{ each step in repo }}:
            ${{ step.key }}: ${{ step.value }}   
            
      #Prepare dotnet core project
      - template: templates/prepare-dotnet-core.yaml
        
      #Publish dotnet core project"
      - template: templates/publish-dotnet-core.yaml
        parameters:
          solution: $(solution)
          buildConfiguration: $(buildConfiguration)

- stage: DeployToAzure
  displayName: Deploy dotnet project to azure
  jobs:
  - job: RSGDeployToAzure
    displayName: Read Service Configs
    steps:
    - ${{ each repo in parameters.checkoutRepos }}:
      - ${{ each step in repo }}:
            ${{ step.key }}: ${{ step.value }}

  - job: RSGDeployToAzureDotNet
    dependsOn: RSGDeployToAzure
    condition: eq( dependencies.RSGDeployToAzure.outputs['sc.pipeline.deployToAzure'], 'true')
    variables:
      azueConnection: $[ dependencies.RSGDeployToAzure.outputs['sc.param.azueConnection'] ]
    displayName: Deploy to Azure App Service
    steps:
    - ${{ each repo in parameters.checkoutRepos }}:
      - ${{ each step in repo }}:
            ${{ step.key }}: ${{ step.value }}
    
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'drop_dotnet'
        path: $(Build.SourcesDirectory)/bin

    - task: AzureRmWebAppDeployment@4
      inputs:
        ConnectionType: 'AzureRM'
        azureSubscription: Azure-Cobssoft
        appType: 'webApp'
        WebAppName: 'BranchingStrategy'
        packageForLinux: '$(Build.SourcesDirectory)/**/*.zip'
